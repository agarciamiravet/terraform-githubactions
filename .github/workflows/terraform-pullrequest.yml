# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths-ignore:
    - '**/README.md'
    - '**/LICENSE'
    - 'visuals/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
    - '**/README.md'
    - '**/LICENSE'
    - 'visuals/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # ARM_SAS_TOKEN: ${{ secrets.ARM_SAS_TOKEN }}
  # TF_VAR_backend_storage_container: ${{ secrets.TF_VAR_backend_storage_container }}
  # TF_VAR_backend_storage_account: ${{ secrets.TF_VAR_backend_storage_account }}
  # TF_VAR_backend_resource_group: ${{ secrets.TF_VAR_backend_resource_group }}
  TF_IN_AUTOMATION: true
  
name: ci-vanilla

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
        run:
          working-directory: ./src/terraform
    env:
      ARM_CLIENT_ID: ${{secrets.TF_ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.TFM_ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.TFM_ARM_TENANT_ID}}
      TF_VAR_app_service_plan_name: ${{secrets.TF_VAR_APP_SERVICE_PLAN_NAME}}
      TF_VAR_heroesapi_appsvcname: ${{secrets.TF_VAR_HEROESAPI_APPSVCNAME}}
      TF_VAR_heroesweb_appsvcname: ${{secrets.TF_VAR_HEROESWEB_APPSVCNAME}}
      TF_VAR_resource_group: ${{secrets.TF_VAR_RESOURCE_GROUP}}
      TF_VAR_heroesinsights: ${{secrets.TF_VAR_HEROESINSIGHTS}}
      TF_VAR_sql_server_login: ${{secrets.TF_VAR_SQL_SERVER_LOGIN}}
      TF_VAR_sql_server_pwd: ${{secrets.TF_VAR_SQL_SERVER_PWD}}
      TF_VAR_sql_server_name: ${{secrets.TF_VAR_SQL_SERVER_NAME}}
      TF_VAR_database_name: ${{secrets.TF_VAR_DATABASE_NAME}}
    steps:
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt
        
     - name: Terraform Plan
       id: plan
       if: github.event_name == 'pull_request'
       run: terraform plan -no-color
       continue-on-error: true
     
     - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            
       - name: Terraform Plan Status
          if: steps.plan.outcome == 'failure'
          run: exit 1
     
