# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths-ignore:
    - '**/README.md'
    - '**/LICENSE'
    - 'visuals/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
    - '**/README.md'
    - '**/LICENSE'
    - 'visuals/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # ARM_SAS_TOKEN: ${{ secrets.ARM_SAS_TOKEN }}
  # TF_VAR_backend_storage_container: ${{ secrets.TF_VAR_backend_storage_container }}
  # TF_VAR_backend_storage_account: ${{ secrets.TF_VAR_backend_storage_account }}
  # TF_VAR_backend_resource_group: ${{ secrets.TF_VAR_backend_resource_group }}
  TF_IN_AUTOMATION: true
  
name: ci-vanilla

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
        run:
          working-directory: ./src/terraform
    env:
      ARM_CLIENT_ID: ${{secrets.TF_ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.TFM_ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.TFM_ARM_TENANT_ID}}
      TF_VAR_app_service_plan_name: ${{secrets.TF_VAR_APP_SERVICE_PLAN_NAME}}
      TF_VAR_heroesapi_appsvcname: ${{secrets.TF_VAR_HEROESAPI_APPSVCNAME}}
      TF_VAR_heroesweb_appsvcname: ${{secrets.TF_VAR_HEROESWEB_APPSVCNAME}}
      TF_VAR_resource_group: ${{secrets.TF_VAR_RESOURCE_GROUP}}
      TF_VAR_heroesinsights: ${{secrets.TF_VAR_HEROESINSIGHTS}}
      TF_VAR_sql_server_login: ${{secrets.TF_VAR_SQL_SERVER_LOGIN}}
      TF_VAR_sql_server_pwd: ${{secrets.TF_VAR_SQL_SERVER_PWD}}
      TF_VAR_sql_server_name: ${{secrets.TF_VAR_SQL_SERVER_NAME}}
      TF_VAR_database_name: ${{secrets.TF_VAR_DATABASE_NAME}}
    steps:
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt
        
      - name: Terraform Plan
        run: terraform plan 
        
      - name: Prep tests
        run: |
          terraform plan -out tfplan.binary
          terraform show -json tfplan.binary > tfplan.json
          ls
          echo $PWD
          
      #- name: OPA tests 2
      #  uses: ibiqlik/conftest-action-docker@master
      #  with:
      #    path: "examples/account.json"
      #    policy: "policy"
      - name: OPA tests
        id: opatests
        uses: ibiqlik/conftest-action-docker@master
        continue-on-error: true
        with:
          path: "src/terraform/tfplan.json"
          policy: "policy"
      
      - name: Create artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: /home/runner/work/src/terraform/tfplan.binary

      - name: Slack notification
        if: steps.opatests.outcome != 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
  deploy:
    needs: terraform
    environment: production
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/download-artifact@v2
        with:
          name: my-artifact
      
      - name: Terraform check plan
        run: ls
        

